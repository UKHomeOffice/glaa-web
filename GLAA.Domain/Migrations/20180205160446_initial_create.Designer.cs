// <auto-generated />
using GLAA.Domain;
using GLAA.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GLAA.Domain.Migrations
{
    [DbContext(typeof(GLAAContext))]
    [Migration("20180205160446_initial_create")]
    partial class initial_create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceCountry", b =>
                {
                    b.Property<int>("LicenceId");

                    b.Property<int>("CountryId");

                    b.HasKey("LicenceId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("LicenceCountry");
                });

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceIndustry", b =>
                {
                    b.Property<int>("LicenceId");

                    b.Property<int>("IndustryId");

                    b.HasKey("LicenceId", "IndustryId");

                    b.HasIndex("IndustryId");

                    b.ToTable("LicenceIndustry");
                });

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceMultiple", b =>
                {
                    b.Property<int>("LicenceId");

                    b.Property<int>("MultipleId");

                    b.HasKey("LicenceId", "MultipleId");

                    b.HasIndex("MultipleId");

                    b.ToTable("LicenceMultiple");
                });

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceSector", b =>
                {
                    b.Property<int>("LicenceId");

                    b.Property<int>("SectorId");

                    b.HasKey("LicenceId", "SectorId");

                    b.HasIndex("SectorId");

                    b.ToTable("LicenceSector");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLine3");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<bool>("NonUK");

                    b.Property<string>("Postcode");

                    b.Property<string>("Town");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("GLAA.Domain.Models.AlternativeBusinessRepresentative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<string>("AlternativeName");

                    b.Property<DateTime?>("BankruptcyDate");

                    b.Property<string>("BankruptcyNumber");

                    b.Property<string>("BusinessExtension");

                    b.Property<string>("BusinessPhoneNumber");

                    b.Property<string>("CountryOfBirth");

                    b.Property<string>("CountyOfBirth");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DisqualificationDetails");

                    b.Property<string>("FullName");

                    b.Property<bool?>("HasAlternativeName");

                    b.Property<bool?>("HasOffencesAwaitingTrial");

                    b.Property<bool?>("HasPassport");

                    b.Property<bool?>("HasPreviouslyHeldLicence");

                    b.Property<bool?>("HasRestraintOrders");

                    b.Property<bool?>("HasUnspentConvictions");

                    b.Property<bool?>("IsDisqualifiedDirector");

                    b.Property<bool?>("IsUndischargedBankrupt");

                    b.Property<string>("JobTitle");

                    b.Property<int>("LicenceId");

                    b.Property<string>("NationalInsuranceNumber");

                    b.Property<string>("Nationality");

                    b.Property<string>("PersonalEmailAddress");

                    b.Property<string>("PersonalMobileNumber");

                    b.Property<string>("PreviousLicenceDescription");

                    b.Property<bool?>("RequiresVisa");

                    b.Property<string>("TownOfBirth");

                    b.Property<string>("VisaDescription");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LicenceId");

                    b.ToTable("AlternativeBusinessRepresentative");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Conviction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlternativeBusinessRepresentativeId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("DirectorOrPartnerId");

                    b.Property<int?>("NamedIndividualId");

                    b.Property<int?>("PrincipalAuthorityId");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeBusinessRepresentativeId");

                    b.HasIndex("DirectorOrPartnerId");

                    b.HasIndex("NamedIndividualId");

                    b.HasIndex("PrincipalAuthorityId");

                    b.ToTable("Conviction");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("GLAA.Domain.Models.DirectorOrPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<string>("AlternativeName");

                    b.Property<DateTime?>("BankruptcyDate");

                    b.Property<string>("BankruptcyNumber");

                    b.Property<string>("BusinessExtension");

                    b.Property<string>("BusinessPhoneNumber");

                    b.Property<string>("CountryOfBirth");

                    b.Property<string>("CountyOfBirth");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DisqualificationDetails");

                    b.Property<string>("FullName");

                    b.Property<bool?>("HasAlternativeName");

                    b.Property<bool?>("HasOffencesAwaitingTrial");

                    b.Property<bool?>("HasPassport");

                    b.Property<bool?>("HasPreviouslyHeldLicence");

                    b.Property<bool?>("HasRestraintOrders");

                    b.Property<bool?>("HasUnspentConvictions");

                    b.Property<bool?>("IsDisqualifiedDirector");

                    b.Property<bool?>("IsPreviousPrincipalAuthority");

                    b.Property<bool?>("IsUndischargedBankrupt");

                    b.Property<string>("JobTitle");

                    b.Property<int>("LicenceId");

                    b.Property<string>("NationalInsuranceNumber");

                    b.Property<string>("Nationality");

                    b.Property<string>("PersonalEmailAddress");

                    b.Property<string>("PersonalMobileNumber");

                    b.Property<string>("PreviousLicenceDescription");

                    b.Property<int?>("PrincipalAuthorityId");

                    b.Property<bool?>("RequiresVisa");

                    b.Property<string>("TownOfBirth");

                    b.Property<string>("VisaDescription");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LicenceId");

                    b.HasIndex("PrincipalAuthorityId");

                    b.ToTable("DirectorOrPartner");
                });

            modelBuilder.Entity("GLAA.Domain.Models.GLAARole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles","dbo");
                });

            modelBuilder.Entity("GLAA.Domain.Models.GLAAUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers","dbo");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Licence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AccommodatesWorkers");

                    b.Property<bool?>("AccommodationDeductedFromPay");

                    b.Property<bool?>("AccommodationWorkersChoose");

                    b.Property<int?>("AddressId");

                    b.Property<bool?>("AgreedToStatementFive");

                    b.Property<bool?>("AgreedToStatementFour");

                    b.Property<bool?>("AgreedToStatementOne");

                    b.Property<bool?>("AgreedToStatementSix");

                    b.Property<bool?>("AgreedToStatementThree");

                    b.Property<bool?>("AgreedToStatementTwo");

                    b.Property<bool?>("AgreedToTermsAndConditions");

                    b.Property<string>("ApplicationId");

                    b.Property<string>("BanDescription");

                    b.Property<string>("BusinessEmailAddress");

                    b.Property<string>("BusinessEmailAddressConfirmation");

                    b.Property<string>("BusinessMobileNumber");

                    b.Property<string>("BusinessName");

                    b.Property<string>("BusinessPhoneNumber");

                    b.Property<string>("BusinessWebsite");

                    b.Property<int?>("CommunicationPreference");

                    b.Property<string>("CompaniesHouseNumber");

                    b.Property<DateTime?>("CompanyRegistrationDate");

                    b.Property<bool?>("ContinueApplication");

                    b.Property<DateTime?>("DateOfBan");

                    b.Property<bool>("EmailAlreadyRegistered");

                    b.Property<DateTime?>("GatheringDate");

                    b.Property<string>("GatheringLocation");

                    b.Property<bool?>("HasAlternativeBusinessRepresentatives");

                    b.Property<bool?>("HasBeenBanned");

                    b.Property<bool?>("HasMultiples");

                    b.Property<bool?>("HasNamedIndividuals");

                    b.Property<bool?>("HasPAYEERNNumber");

                    b.Property<bool?>("HasPreviousTradingName");

                    b.Property<bool?>("HasTradingName");

                    b.Property<bool?>("HasVATNumber");

                    b.Property<bool?>("HasWrittenAgreementsInPlace");

                    b.Property<bool?>("IsPSCControlled");

                    b.Property<bool>("IsShellfish");

                    b.Property<int?>("LegalStatus");

                    b.Property<int>("NamedIndividualType");

                    b.Property<string>("NationalityOfShellfishWorkers");

                    b.Property<int?>("NumberOfDirectorsOrPartners");

                    b.Property<int>("NumberOfMultiples");

                    b.Property<int?>("NumberOfProperties");

                    b.Property<int?>("NumberOfShellfishWorkers");

                    b.Property<int?>("NumberOfVehicles");

                    b.Property<string>("OtherLegalStatus");

                    b.Property<string>("OtherMultiple");

                    b.Property<string>("OtherOperatingIndustry");

                    b.Property<string>("OtherSector");

                    b.Property<string>("PAYEERNNumber");

                    b.Property<DateTime?>("PAYEERNRegistrationDate");

                    b.Property<string>("PSCDetails");

                    b.Property<bool?>("PreviouslyWorkedInShellfish");

                    b.Property<string>("SignatoryName");

                    b.Property<DateTime?>("SignatureDate");

                    b.Property<string>("SubcontractorNames");

                    b.Property<bool?>("SuppliesWorkers");

                    b.Property<bool?>("SuppliesWorkersOutsideLicensableAreas");

                    b.Property<string>("TaxReferenceNumber");

                    b.Property<string>("TradingName");

                    b.Property<bool?>("TransportDeductedFromPay");

                    b.Property<bool?>("TransportWorkersChoose");

                    b.Property<bool?>("TransportsWorkersToWorkplace");

                    b.Property<int?>("TurnoverBand");

                    b.Property<string>("UserId");

                    b.Property<bool?>("UsesSubcontractors");

                    b.Property<string>("VATNumber");

                    b.Property<DateTime?>("VATRegistrationDate");

                    b.Property<int>("WorkerContract");

                    b.Property<int>("WorkerSource");

                    b.Property<int>("WorkerSupplyMethod");

                    b.Property<string>("WorkerSupplyOther");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Licence");
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicenceStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ActiveCheckDescription");

                    b.Property<int>("AdminCategory");

                    b.Property<string>("CssClassStem");

                    b.Property<string>("ExternalDescription");

                    b.Property<string>("InternalDescription");

                    b.Property<string>("InternalStatus");

                    b.Property<bool>("RequireNonCompliantStandards");

                    b.Property<bool>("ShowInPublicRegister");

                    b.HasKey("Id");

                    b.ToTable("LicenceStatus");
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicenceStatusChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<int?>("LicenceId");

                    b.Property<int?>("ReasonId");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("StatusId");

                    b.ToTable("LicenceStatusChange");
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicenceStatusChangeLicensingStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LicenceStatusChangeId");

                    b.Property<int>("LicensingStandardId");

                    b.HasKey("Id");

                    b.HasIndex("LicenceStatusChangeId");

                    b.HasIndex("LicensingStandardId");

                    b.ToTable("LicenceStatusChangeLicensingStandard");
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicenceStatusNextStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NextStatusId");

                    b.Property<int?>("NextStatusId1");

                    b.HasKey("Id");

                    b.HasIndex("NextStatusId");

                    b.HasIndex("NextStatusId1");

                    b.ToTable("LicenceStatusNextStatus");
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicensingStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCritical");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LicensingStandard");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Multiple", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Multiple");
                });

            modelBuilder.Entity("GLAA.Domain.Models.NamedIndividual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BankruptcyDate");

                    b.Property<string>("BankruptcyNumber");

                    b.Property<string>("BusinessExtension");

                    b.Property<string>("BusinessPhoneNumber");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DisqualificationDetails");

                    b.Property<string>("FullName");

                    b.Property<bool?>("HasOffencesAwaitingTrial");

                    b.Property<bool?>("HasPreviouslyHeldLicence");

                    b.Property<bool?>("HasRestraintOrders");

                    b.Property<bool?>("HasUnspentConvictions");

                    b.Property<bool?>("IsDisqualifiedDirector");

                    b.Property<bool?>("IsUndischargedBankrupt");

                    b.Property<int>("LicenceId");

                    b.Property<string>("PreviousLicenceDescription");

                    b.Property<bool?>("RequiresVisa");

                    b.Property<string>("VisaDescription");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.ToTable("NamedIndividual");
                });

            modelBuilder.Entity("GLAA.Domain.Models.NamedJobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JobTitle");

                    b.Property<int?>("JobTitleNumber");

                    b.Property<int>("LicenceId");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.ToTable("NamedJobTitle");
                });

            modelBuilder.Entity("GLAA.Domain.Models.OffenceAwaitingTrial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlternativeBusinessRepresentativeId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("DirectorOrPartnerId");

                    b.Property<int?>("NamedIndividualId");

                    b.Property<int?>("PrincipalAuthorityId");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeBusinessRepresentativeId");

                    b.HasIndex("DirectorOrPartnerId");

                    b.HasIndex("NamedIndividualId");

                    b.HasIndex("PrincipalAuthorityId");

                    b.ToTable("OffenceAwaitingTrial");
                });

            modelBuilder.Entity("GLAA.Domain.Models.PreviousTradingName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessName");

                    b.Property<string>("Country");

                    b.Property<int?>("LicenceId");

                    b.Property<string>("Town");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.ToTable("PreviousTradingName");
                });

            modelBuilder.Entity("GLAA.Domain.Models.PrincipalAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<string>("AlternativeName");

                    b.Property<DateTime?>("BankruptcyDate");

                    b.Property<string>("BankruptcyNumber");

                    b.Property<string>("BusinessExtension");

                    b.Property<string>("BusinessPhoneNumber");

                    b.Property<string>("CountryOfBirth");

                    b.Property<string>("CountyOfBirth");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int?>("DirectorOrPartnerId");

                    b.Property<string>("DisqualificationDetails");

                    b.Property<string>("FullName");

                    b.Property<bool?>("HasAlternativeName");

                    b.Property<bool?>("HasOffencesAwaitingTrial");

                    b.Property<bool?>("HasPassport");

                    b.Property<bool?>("HasPreviouslyHeldLicence");

                    b.Property<bool?>("HasRestraintOrders");

                    b.Property<bool?>("HasUnspentConvictions");

                    b.Property<string>("ImmigrationStatus");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool?>("IsDirector");

                    b.Property<bool?>("IsDisqualifiedDirector");

                    b.Property<bool?>("IsUndischargedBankrupt");

                    b.Property<string>("JobTitle");

                    b.Property<DateTime?>("LeaveToRemainTo");

                    b.Property<int?>("LengthOfUKWorkMonths");

                    b.Property<int?>("LengthOfUKWorkYears");

                    b.Property<int>("LicenceId");

                    b.Property<string>("NationalInsuranceNumber");

                    b.Property<string>("Nationality");

                    b.Property<int?>("PermissionToWorkStatus");

                    b.Property<string>("PersonalEmailAddress");

                    b.Property<string>("PersonalMobileNumber");

                    b.Property<string>("PreviousExperience");

                    b.Property<string>("PreviousLicenceDescription");

                    b.Property<bool?>("RequiresVisa");

                    b.Property<string>("TownOfBirth");

                    b.Property<string>("VisaDescription");

                    b.Property<string>("VisaNumber");

                    b.Property<bool?>("WillProvideConfirmation");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DirectorOrPartnerId");

                    b.HasIndex("LicenceId");

                    b.ToTable("PrincipalAuthority");
                });

            modelBuilder.Entity("GLAA.Domain.Models.RestraintOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlternativeBusinessRepresentativeId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("DirectorOrPartnerId");

                    b.Property<int?>("NamedIndividualId");

                    b.Property<int?>("PrincipalAuthorityId");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeBusinessRepresentativeId");

                    b.HasIndex("DirectorOrPartnerId");

                    b.HasIndex("NamedIndividualId");

                    b.HasIndex("PrincipalAuthorityId");

                    b.ToTable("RestraintOrder");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("GLAA.Domain.Models.StatusReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("LicenceStatusId");

                    b.HasKey("Id");

                    b.HasIndex("LicenceStatusId");

                    b.ToTable("StatusReason");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceCountry", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Country", "Country")
                        .WithMany("Licences")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("OperatingCountries")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceIndustry", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Industry", "Industry")
                        .WithMany("Licences")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("OperatingIndustries")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceMultiple", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("SelectedMultiples")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.Multiple", "Multiple")
                        .WithMany("Licences")
                        .HasForeignKey("MultipleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Core.Models.LicenceSector", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("SelectedSectors")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.Sector", "Sector")
                        .WithMany("Licences")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Models.AlternativeBusinessRepresentative", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("AlternativeBusinessRepresentatives")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Models.Conviction", b =>
                {
                    b.HasOne("GLAA.Domain.Models.AlternativeBusinessRepresentative", "AlternativeBusinessRepresentative")
                        .WithMany("UnspentConvictions")
                        .HasForeignKey("AlternativeBusinessRepresentativeId");

                    b.HasOne("GLAA.Domain.Models.DirectorOrPartner", "DirectorOrPartner")
                        .WithMany("UnspentConvictions")
                        .HasForeignKey("DirectorOrPartnerId");

                    b.HasOne("GLAA.Domain.Models.NamedIndividual", "NamedIndividual")
                        .WithMany("UnspentConvictions")
                        .HasForeignKey("NamedIndividualId");

                    b.HasOne("GLAA.Domain.Models.PrincipalAuthority", "PrincipalAuthority")
                        .WithMany("UnspentConvictions")
                        .HasForeignKey("PrincipalAuthorityId");
                });

            modelBuilder.Entity("GLAA.Domain.Models.DirectorOrPartner", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("DirectorOrPartners")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.PrincipalAuthority", "PrincipalAuthority")
                        .WithMany()
                        .HasForeignKey("PrincipalAuthorityId");
                });

            modelBuilder.Entity("GLAA.Domain.Models.Licence", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GLAA.Domain.Models.GLAAUser", "User")
                        .WithMany("Licences")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicenceStatusChange", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("LicenceStatusHistory")
                        .HasForeignKey("LicenceId");

                    b.HasOne("GLAA.Domain.Models.StatusReason", "Reason")
                        .WithMany("LicenceStatusChanges")
                        .HasForeignKey("ReasonId");

                    b.HasOne("GLAA.Domain.Models.LicenceStatus", "Status")
                        .WithMany("LicenceStatusChanges")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicenceStatusChangeLicensingStandard", b =>
                {
                    b.HasOne("GLAA.Domain.Models.LicenceStatusChange", "LicenceStatusChange")
                        .WithMany("NonCompliantStandards")
                        .HasForeignKey("LicenceStatusChangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.LicensingStandard", "LicensingStandard")
                        .WithMany("LicenceStatusChanges")
                        .HasForeignKey("LicensingStandardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Models.LicenceStatusNextStatus", b =>
                {
                    b.HasOne("GLAA.Domain.Models.LicenceStatus", "LicenceStatus")
                        .WithMany("NextStatuses")
                        .HasForeignKey("NextStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.LicenceStatus", "NextStatus")
                        .WithMany()
                        .HasForeignKey("NextStatusId1");
                });

            modelBuilder.Entity("GLAA.Domain.Models.NamedIndividual", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("NamedIndividuals")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Models.NamedJobTitle", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("NamedJobTitles")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Models.OffenceAwaitingTrial", b =>
                {
                    b.HasOne("GLAA.Domain.Models.AlternativeBusinessRepresentative", "AlternativeBusinessRepresentative")
                        .WithMany("OffencesAwaitingTrial")
                        .HasForeignKey("AlternativeBusinessRepresentativeId");

                    b.HasOne("GLAA.Domain.Models.DirectorOrPartner", "DirectorOrPartner")
                        .WithMany("OffencesAwaitingTrial")
                        .HasForeignKey("DirectorOrPartnerId");

                    b.HasOne("GLAA.Domain.Models.NamedIndividual", "NamedIndividual")
                        .WithMany("OffencesAwaitingTrial")
                        .HasForeignKey("NamedIndividualId");

                    b.HasOne("GLAA.Domain.Models.PrincipalAuthority", "PrincipalAuthority")
                        .WithMany("OffencesAwaitingTrial")
                        .HasForeignKey("PrincipalAuthorityId");
                });

            modelBuilder.Entity("GLAA.Domain.Models.PreviousTradingName", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("PreviousTradingNames")
                        .HasForeignKey("LicenceId");
                });

            modelBuilder.Entity("GLAA.Domain.Models.PrincipalAuthority", b =>
                {
                    b.HasOne("GLAA.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GLAA.Domain.Models.DirectorOrPartner", "DirectorOrPartner")
                        .WithMany()
                        .HasForeignKey("DirectorOrPartnerId");

                    b.HasOne("GLAA.Domain.Models.Licence", "Licence")
                        .WithMany("PrincipalAuthorities")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GLAA.Domain.Models.RestraintOrder", b =>
                {
                    b.HasOne("GLAA.Domain.Models.AlternativeBusinessRepresentative", "AlternativeBusinessRepresentative")
                        .WithMany("RestraintOrders")
                        .HasForeignKey("AlternativeBusinessRepresentativeId");

                    b.HasOne("GLAA.Domain.Models.DirectorOrPartner", "DirectorOrPartner")
                        .WithMany("RestraintOrders")
                        .HasForeignKey("DirectorOrPartnerId");

                    b.HasOne("GLAA.Domain.Models.NamedIndividual", "NamedIndividual")
                        .WithMany("RestraintOrders")
                        .HasForeignKey("NamedIndividualId");

                    b.HasOne("GLAA.Domain.Models.PrincipalAuthority", "PrincipalAuthority")
                        .WithMany("RestraintOrders")
                        .HasForeignKey("PrincipalAuthorityId");
                });

            modelBuilder.Entity("GLAA.Domain.Models.StatusReason", b =>
                {
                    b.HasOne("GLAA.Domain.Models.LicenceStatus")
                        .WithMany("StatusReasons")
                        .HasForeignKey("LicenceStatusId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("GLAA.Domain.Models.GLAARole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GLAA.Domain.Models.GLAAUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GLAA.Domain.Models.GLAAUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("GLAA.Domain.Models.GLAARole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GLAA.Domain.Models.GLAAUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GLAA.Domain.Models.GLAAUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
